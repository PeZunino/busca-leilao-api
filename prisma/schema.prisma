generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auctioneer {
  @@map("auctioneer")
  id                          String        @id @default(uuid())
      
  name                        String        @unique
  registrationCode            String        @unique @map("registration_code")
  phoneNumber                 String        @map("phone_number")
  email                       String
  street                      String
  number                      String
  cep                         String
  neighborhood                String
  city                        String
  state                       String
  websites                    String[]
  createdAt                   DateTime      @default(now()) @map("created_at")
  updatedAt                   DateTime?     @updatedAt @map("updated_at")
      
  Auction                     Auction[]
}

model Committee{
  @@map("committee")
  id                          String         @id @default(uuid())

  name                        String
  createdAt                   DateTime      @default(now()) @map("created_at")
  updatedAt                   DateTime?     @updatedAt @map("updated_at")
      
  auction                     Auction?   
}

model Auction {
  @@map("auction")
  id                          String            @id @default(uuid())

  publicationDate             DateTime          @map("publication_date")
  createdAt                   DateTime          @default(now()) @map("created_at")
  updatedAt                   DateTime?         @updatedAt @map("updated_at")

  items                       AuctionItem[]
  openings                    AuctionOpening[]

  auctioneerId                String            @map("auctioneer_id")
  auctioneer                  Auctioneer        @relation(fields: [auctioneerId], references: [id])

  committeeId                 String            @unique @map("committee_id")
  committee                   Committee         @relation(fields: [committeeId], references: [id])
}
model AuctionOpening {
  @@map("auction_opening")
  id                          String   @id @default(uuid())

  date                        DateTime @map("date")
  createdAt                   DateTime @default(now()) @map("created_at")
                  
  auctionId                   String   @map("auction_id")
  auction                     Auction  @relation(fields: [auctionId], references: [id])
}


model AuctionItem{
  @@map("auction_item")
  id                          String     @id @default(uuid())

  startingBid                 Float      @map("starting_bid")
  description                 String
  observation                 String?
  initialValue                Float      @map("initial_value")
  debits                      Float
  origin                      String
  createdAt                   DateTime   @default(now()) @map("created_at")
  updatedAt                   DateTime?  @updatedAt @map("updated_at")

  auctionId                   String     @map("auction_id")
  auction                     Auction    @relation(fields: [auctionId], references: [id])

  car                         Car?         @relation(fields: [carId], references: [id])
  carId                       String?      @map("car_id")
  
  motorcycle                  Motorcycle?  @relation(fields: [motorcycleId], references: [id])
  motorcycleId                String?      @map("motorcycle_id")
  
  field                       Field?       @relation(fields: [fieldId], references: [id])
  fieldId                     String?      @map("field_id")

  realEstate                  RealEstate?  @relation(fields: [realEstateId], references: [id])
  realEstateId                String?      @map("realEstate_id")

}

model Car{
  @@map("car")
  id                          String         @id @default(uuid())

  origin                      String
  mount                       String
  mileage                     Int
  hasKeys                     Boolean        @map("has_keys")
  licensePlate                String         @map("license_plate")
  color                       String
  brand                       String
  model                       String
  version                     String
  year                        Int
  yearModel                   Int            @map("year_model")
  forCirculation              Boolean        @map("for_circulation")
  fuel                        String
  hasAirConditioning          Boolean        @map("has_air_conditioning")
  steeringType                String         @map("steering_type")
  hasSpareTire                Boolean        @map("has_spare_tire")
  gearbox                     String
  hasArmor                    Boolean        @map("has_armor")
  numberOfDoors               Int            @map("number_of_doors")
  class                       String 
  createdAt                   DateTime       @default(now()) @map("created_at")
  updatedAt                   DateTime?      @updatedAt @map("updated_at")
        
  AuctionItem AuctionItem[]
}

model Motorcycle{
  @@map("motorcycle")
  id                          String         @id @default(uuid())

  origin                      String
  mount                       String
  mileage                     Int
  hasKeys                     Boolean        @map("has_keys")
  licensePlate                String         @map("license_plate")
  color                       String
  brand                       String
  model                       String
  version                     String
  year                        Int
  yearModel                   Int            @map("year_model")
  forCirculation              Boolean        @map("for_circulation")
  fuel                        String
  createdAt                   DateTime       @default(now()) @map("created_at")
  updatedAt                   DateTime?      @updatedAt @map("updated_at")
    
  AuctionItem AuctionItem[]
}

model Field{
  @@map("field")
  id                          String         @id @default(uuid())

  origin                      String
	isOccupied                  Boolean        @map("is_occupied")
	squareMetersTotalArea       Float          @map("square_meters_total_area")
	squareMetersBuiltArea       Float          @map("square_meters_built_area")
	squareMetersPrivateArea     Float          @map("square_meters_private_area")
	squareMetersFieldArea       Float          @map("square_meters_field_area")
	debits                      Float
	allowVisits                 Boolean        @map("allow_visits")
	lawsuit                     Boolean
	registration                String
	street                      String
  number                      String
  cep                         String
  neighborhood                String
  city                        String
  state                       String
	complement                  String?
	kilometersDistanceToSubway  Int?           @map("kilometers_distance_to_subway")
  isUrban                     Boolean        @map("is_urban")
	hasWaterAccess              Boolean        @map("has_water_access")
  createdAt                   DateTime       @default(now()) @map("created_at")
  updatedAt                   DateTime?      @updatedAt @map("updated_at")

  AuctionItem AuctionItem[]
}
model RealEstate{
  @@map("real_estate")
  id                          String         @id @default(uuid())
  
  origin                      String
  isOccupied                  Boolean        @map("is_occupied")
	squareMetersTotalArea       Float          @map("square_meters_total_area")
	squareMetersBuiltArea       Float          @map("square_meters_built_area")
	squareMetersPrivateArea     Float          @map("square_meters_private_area")
	squareMetersFieldArea       Float          @map("square_meters_field_area")
	debits                      Float
	allowVisits                 Boolean        @map("allow_visits")
	lawsuit                     Boolean
	registration                String
	street                      String
  number                      String
  cep                         String
  neighborhood                String
  city                        String
  state                       String
	complement                  String?
	kilometersDistanceToSubway  Int?           @map("kilometers_distance_to_subway")
  hasGarage                   Boolean        @map("has_garage")
	numberOfBedrooms            Int            @map("number_of_bedrooms")
  createdAt                   DateTime       @default(now()) @map("created_at")
  updatedAt                   DateTime?      @updatedAt @map("updated_at")

  AuctionItem AuctionItem[]
}